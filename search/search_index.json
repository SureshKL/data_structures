{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"https://sureshkl.github.io/data_structures","title":"Home"},{"location":"recursion/","text":"Factorial 1 2 3 4 5 6 def factorial ( n ): if n in [ 0 , 1 ]: return n return n * factorial ( n - 1 ) print ( factorial ( 5 )) # 5! = 120 Fibonacci 1 2 3 4 5 6 def fibonacci ( n ): if n in [ 0 , 1 ]: return n return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) print ( fibonacci ( 5 )) # 0 1 1 2 3 5 = 5 Product of two nums 1 2 3 4 5 6 7 def product ( num ): if num == 1 : return num rem = num % 10 return rem * product ( num // 10 ) print ( product ( 123 )) # 1*2*3 = 5 GCD of two nums 1 2 3 4 5 6 def gcd ( a , b ): if b == 0 : return a return gcd ( b , a % b ) print ( gcd ( 48 , 18 )) # gcd(48, 18) = 6 Decimal to Binary 1 2 3 4 5 6 7 8 def decimal_to_binary ( quot , rem ): if quot == 0 : return rem quot = num // 2 rem = num % 2 return decimal_to_binary ( quot ) print ( decimal_to_binary ( 10 // 2 , 10 % 2 )) Power of number 1 2 3 4 5 6 def pow ( base , exponent ): if exponent == 0 : return 1 return base * pow ( base , exponent - 1 ) print ( pow ( 2 , 4 )) # 2*2*2*2 = 16","title":"Recursion"},{"location":"recursion/#factorial","text":"1 2 3 4 5 6 def factorial ( n ): if n in [ 0 , 1 ]: return n return n * factorial ( n - 1 ) print ( factorial ( 5 )) # 5! = 120","title":"Factorial"},{"location":"recursion/#fibonacci","text":"1 2 3 4 5 6 def fibonacci ( n ): if n in [ 0 , 1 ]: return n return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) print ( fibonacci ( 5 )) # 0 1 1 2 3 5 = 5","title":"Fibonacci"},{"location":"recursion/#product-of-two-nums","text":"1 2 3 4 5 6 7 def product ( num ): if num == 1 : return num rem = num % 10 return rem * product ( num // 10 ) print ( product ( 123 )) # 1*2*3 = 5","title":"Product of two nums"},{"location":"recursion/#gcd-of-two-nums","text":"1 2 3 4 5 6 def gcd ( a , b ): if b == 0 : return a return gcd ( b , a % b ) print ( gcd ( 48 , 18 )) # gcd(48, 18) = 6","title":"GCD of two nums"},{"location":"recursion/#decimal-to-binary","text":"1 2 3 4 5 6 7 8 def decimal_to_binary ( quot , rem ): if quot == 0 : return rem quot = num // 2 rem = num % 2 return decimal_to_binary ( quot ) print ( decimal_to_binary ( 10 // 2 , 10 % 2 ))","title":"Decimal to Binary"},{"location":"recursion/#power-of-number","text":"1 2 3 4 5 6 def pow ( base , exponent ): if exponent == 0 : return 1 return base * pow ( base , exponent - 1 ) print ( pow ( 2 , 4 )) # 2*2*2*2 = 16","title":"Power of number"}]}